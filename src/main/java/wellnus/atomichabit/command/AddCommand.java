package wellnus.atomichabit.command;

import wellnus.atomichabit.feature.AtomicHabit;
import wellnus.atomichabit.feature.AtomicHabitList;
import wellnus.atomichabit.feature.AtomicHabitManager;
import wellnus.command.Command;
import wellnus.command.CommandParser;
import wellnus.exception.BadCommandException;
import wellnus.ui.TextUi;

import java.util.HashMap;

public class AddCommand extends Command {
    private static final String COMMAND_DETAILED_DESCRIPTION = "";
    private static final String COMMAND_KEYWORD = "add";
    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE = "Wrong arguments given to 'hb add'!";
    private static final String COMMAND_NAME_ARGUMENT = "name";
    private static final String COMMAND_KEYWORD_ASSERTION = "The key should be add.";
    private static final String COMMAND_PAYLOAD_ASSERTION = "The payload should not be empty.";
    private static final int COMMAND_NUM_OF_ARGUMENTS = 2;
    private static final String COMMAND_SUPPORTED_ARGUMENTS = "";
    private static final String COMMAND_WRONG_KEYWORD_MESSAGE = "Wrong command issued by the user, expected 'hb add'?";
    private static final String FEEDBACK_STRING_ONE = "Yay! You have added a new habit:";
    private static final String FEEDBACK_STRING_TWO = "was successfully added";
    private final AtomicHabitList atomicHabits;
    private final CommandParser commandParser;
    private final TextUi textUi;

    public AddCommand(HashMap<String, String> arguments, AtomicHabitList atomicHabits) {
        super(arguments);
        this.atomicHabits = atomicHabits;
        this.commandParser = new CommandParser();
        this.textUi = new TextUi();
    }

    private AtomicHabitList getAtomicHabits() {
        return atomicHabits;
    }

    private TextUi getTextUi() {
        return textUi;
    }

    /**
     * Identifies this Command's keyword. Override this in subclasses so
     * toString() returns the correct String representation.
     *
     * @return String Keyword of this Command
     */
    @Override
    protected String getCommandKeyword() {
        assert COMMAND_KEYWORD != null : "COMMAND_KEYWORD cannot be null";
        return COMMAND_KEYWORD;
    }

    /**
     * Returns a detailed user-friendly description of what this specific command does.
     *
     * @return String Detailed explanation of this command
     */
    @Override
    protected String getDetailedDescription() {
        return COMMAND_DETAILED_DESCRIPTION;
    }

    /**
     * Identifies the feature that this Command is associated with. Override
     * this in subclasses so toString() returns the correct String representation.
     *
     * @return String Keyword for the feature associated with this Command
     */
    @Override
    protected String getFeatureKeyword() {
        return AtomicHabitManager.FEATURE_NAME;
    }

    /**
     * Returns all the supported arguments for this Command.
     *
     * @return String All supported arguments for this Command
     */
    @Override
    protected String getSupportedCommandArguments() {
        return COMMAND_SUPPORTED_ARGUMENTS;
    }

    /**
     * Adds of the new atomic habit into our list of atomic habits.
     * <p>
     * After that, print a message telling the user what the new habit added is
     */
    @Override
    public void execute() {
        try {
            validateCommand(super.getArguments());
        } catch (BadCommandException badCommandException) {
            String NO_ADDITIONAL_MESSAGE = "";
            this.getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);
            return;
        }
        assert super.getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;
        String name = super.getArguments().get(AddCommand.COMMAND_NAME_ARGUMENT);
        AtomicHabit habit = new AtomicHabit(name);
        this.getAtomicHabits().addAtomicHabit(habit);
        String messageToUser = FEEDBACK_STRING_ONE + System.lineSeparator();
        messageToUser += String.format("'%s' %s", habit, FEEDBACK_STRING_TWO);
        getTextUi().printOutputMessage(messageToUser);
    }

    /**
     * Validate the arguments and payloads from a commandMap generated by CommandParser.<br>
     * <br>
     * If no exceptions are thrown, command is valid.
     *
     * @param arguments Argument-Payload map generated by CommandParser
     * @throws BadCommandException If the arguments have any issues
     */
    @Override
    public void validateCommand(HashMap<String, String> arguments) throws BadCommandException {
        if (arguments.size() != AddCommand.COMMAND_NUM_OF_ARGUMENTS) {
            throw new BadCommandException(AddCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);
        }
        if (!arguments.containsKey(AddCommand.COMMAND_KEYWORD)) {
            throw new BadCommandException(AddCommand.COMMAND_WRONG_KEYWORD_MESSAGE);
        }
        String name = arguments.get(AddCommand.COMMAND_NAME_ARGUMENT);
        if (name.isEmpty()) {
            throw new BadCommandException(AddCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);
        }
    }
}


