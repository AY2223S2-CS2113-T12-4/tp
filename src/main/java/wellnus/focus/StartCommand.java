package wellnus.focus;

import wellnus.command.Command;
import wellnus.exception.BadCommandException;
import wellnus.exception.WellNusException;
import wellnus.ui.TextUi;

import java.util.HashMap;

public class StartCommand extends Command {

    private final static String START_MESSAGE = "Your session has started! Please focus on your task.";
    private final Session session;

    private final TextUi textUi;

    public StartCommand(HashMap<String, String> arguments, Session session) {
        super(arguments);
        this.session = session;
        this.textUi = new TextUi();
    }

    /**
     * Identifies this Command's keyword. Override this in subclasses so
     * toString() returns the correct String representation.
     *
     * @return String Keyword of this Command
     */
    @Override
    protected String getCommandKeyword() {
        return null;
    }

    /**
     * Returns a detailed user-friendly description of what this specific command does.
     *
     * @return String Detailed explanation of this command
     */


    /**
     * Identifies the feature that this Command is associated with. Override
     * this in subclasses so toString() returns the correct String representation.
     *
     * @return String Keyword for the feature associated with this Command
     */
    @Override
    protected String getFeatureKeyword() {
        return null;
    }

    /**
     * Returns all the supported arguments for this Command.
     *
     * @return String All supported arguments for this Command
     */


    /**
     * Executes the specified command from the user.<br>
     * <p>
     * May throw Exceptions if command fails.
     *
     * @throws WellNusException If command fails
     */
    @Override
    public void execute() throws WellNusException {
        session.checkPrevCountdown();
        if (!session.getSession().get(session.getCurrentCountdownIndex()).getIsRunning()) {
            if (session.getCurrentCountdownIndex() == 0) {
                textUi.printOutputMessage(START_MESSAGE);
            }
            session.getSession().get(session.getCurrentCountdownIndex()).start();
            session.getSession().get(session.getCurrentCountdownIndex()).setStart();
            textUi.printOutputMessage(session.getSession().get(session.getCurrentCountdownIndex()).getDescription());
        }
    }

    /**
     * Validate the arguments and payloads from a commandMap generated by CommandParser <br>
     * <br>
     * The validation logic and strictness is up to the implementer. <br>
     * <br>
     * As a guideline, <code>isValidCommand</code> should minimally: <br>
     * <li>Verify that ALL MANDATORY arguments exist</li>
     * <li>Verify that ALL MANDATORY payloads exist</li>
     * <li>Safely verify the payload type (int, date, etc should be properly processed)</li>
     * <br>
     * Additionally, payload value cleanup (such as trimming) is also possible. <br>
     * As Java is pass (object reference) by value, any changes made to commandMap
     * will persist out of the function call.
     *
     * @param arguments Argument-Payload map generated by CommandParser
     * @throws BadCommandException If the arguments have any issues
     */
    @Override
    public void validateCommand(HashMap<String, String> arguments) throws BadCommandException {

    }
}