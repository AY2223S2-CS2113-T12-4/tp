package wellnus.reflection;

import wellnus.command.Command;
import wellnus.exception.BadCommandException;

import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

public class HomeCommand extends Command {
    private static final Logger LOGGER = Logger.getLogger("ReflectHomeCommandLogger");
    private static final String FEATURE_NAME = "reflect";
    private static final String COMMAND_KEYWORD = "home";
    private static final String PAYLOAD = "";
    private static final ReflectUi UI = new ReflectUi();
    private static final int ARGUMENT_PAYLOAD_SIZE = 1;
    private static final int EMPTY_ARGUMENT_PAYLOAD = 0;
    private static final String INVALID_COMMAND_MSG = "Command is invalid.";
    private static final String INVALID_COMMAND_NOTES = "Please check the available commands "
            + "and the format of commands.";
    private static final String EMPTY_ARGUMENT_PAYLOAD_ASSERTION = "The argument-payload pair cannot be empty!";
    private static final String COMMAND_KEYWORD_ASSERTION = "The key should be return.";
    private static final String COMMAND_PAYLOAD_ASSERTION = "The payload should be empty.";
    private static final String HOME_MESSAGE = "How do you feel after reflecting on yourself?" +
            System.lineSeparator() + "Hope you have gotten some takeaways from self reflection, see you again!!";
    private HashMap<String, String> argumentPayload;

    public HomeCommand(HashMap<String, String> arguments) throws BadCommandException {
        super(arguments);
        this.argumentPayload = getArguments();
        assert argumentPayload.size() > EMPTY_ARGUMENT_PAYLOAD : EMPTY_ARGUMENT_PAYLOAD_ASSERTION;
    }

    /**
     * Get the command itself.
     *
     * @return Command: home
     */
    @Override
    protected String getCommandKeyword() {
        return COMMAND_KEYWORD;
    }

    /**
     * Get the name of the feature in which this home command is generated.
     *
     * @return Feature name: reflect
     */
    @Override
    protected String getFeatureKeyword() {
        return FEATURE_NAME;
    }

    /**
     * Main entry point of this command.<br/>
     * Return back to WellNUS++ main interface
     */
    @Override
    public void execute() {
        try {
            validateCommand(this.argumentPayload);
        } catch (BadCommandException invalidCommand) {
            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);
            UI.printErrorFor(invalidCommand, INVALID_COMMAND_NOTES);
            return;
        }
        assert argumentPayload.containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;
        assert argumentPayload.get(COMMAND_KEYWORD).equals(PAYLOAD) : COMMAND_PAYLOAD_ASSERTION;
        UI.printOutputMessage(HOME_MESSAGE);
        ReflectionManager.setIsExit(true);
    }

    /**
     * Validate the command.<br/>
     * <br/>
     * Conditions for command to be valid:<br/>
     * <li>Only one argument-payload pair
     * <li>The pair contains key: return
     * <li>Payload is empty
     * Whichever mismatch will cause the command to be invalid.
     *
     * @param commandMap Argument-Payload map generated by CommandParser
     * @throws BadCommandException If an invalid command is given
     */
    @Override
    public void validateCommand(HashMap<String, String> commandMap) throws BadCommandException {
        if (commandMap.size() != ARGUMENT_PAYLOAD_SIZE) {
            throw new BadCommandException(INVALID_COMMAND_MSG);
        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {
            throw new BadCommandException(INVALID_COMMAND_MSG);
        } else if (!commandMap.get(COMMAND_KEYWORD).equals(PAYLOAD)) {
            throw new BadCommandException(INVALID_COMMAND_MSG);
        }
    }
}

