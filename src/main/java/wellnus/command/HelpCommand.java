package wellnus.command;

import java.util.HashMap;

import wellnus.exception.BadCommandException;
import wellnus.ui.TextUi;

/**
 * Implementation of WellNus' <code>help</code> command. Explains to the user what commands are supported
 * by WellNus and how to use each command.
 */
public class HelpCommand extends Command {
    private static final String BAD_COMMAND_MESSAGE = "help does not take in any arguments!";
    private static final String COMMAND_KEYWORD = "help";
    private static final String NO_FEATURE_KEYWORD = "";

    private static final String HELP_PREAMBLE = "We are here to ensure your wellness"
                                                    + " is taken care of through WellNUS++\n"
                                                    + "Here are all the commands available for you!\n";
    private static final String FEATURE_HABIT = "hb - Enter Atomic Habits: "
                                                    + "Track your small daily habits and "
                                                    + "nurture it to form a larger behaviour";
    private static final String USAGE_HABIT = "\tusage: hb";
    private static final String FEATURE_REFLECT = "reflect - Read through introspective questions for your reflection";
    private static final String USAGE_REFLECT = "\tusage: reflect";
    private static final String COMMAND_EXIT = "exit - Exit WellNUS++";
    private static final String USAGE_EXIT = "\tusage: exit";

    private static final String PADDING = " ";
    private static final String DOT = ".";
    private static final int ONE_OFFSET = 1;
    private static final int EMPTY_ARG_LENGTH = 0;
    private static final int EXPECTED_PAYLOAD_SIZE = 1;
    private final TextUi textUi;

    /**
     * Initialises a HelpCommand Object using the command arguments issued by the user.
     *
     * @param arguments Command arguments issued by the user
     */
    public HelpCommand(HashMap<String, String> arguments) {
        super(arguments);
        this.textUi = new TextUi();
    }

    private TextUi getTextUi() {
        return this.textUi;
    }

    /**
     * Lists all features available in WellNUS++ and a short description
     */
    private void printHelpMessage() {
        this.getTextUi().printOutputMessage(HELP_PREAMBLE);
        // Refactor this out if it does not scale well
        String[] commandDescriptions = {
            FEATURE_HABIT, FEATURE_REFLECT, COMMAND_EXIT
        };
        String[] commandUsages = {
            USAGE_HABIT, USAGE_REFLECT, USAGE_EXIT
        };
        String outputMessage = "";
        for (int i = 0; i < commandUsages.length; i += 1) {
            outputMessage = outputMessage.concat(i + ONE_OFFSET + DOT + PADDING);
            outputMessage = outputMessage.concat(commandDescriptions[i] + System.lineSeparator());
            outputMessage = outputMessage.concat(commandUsages[i] + System.lineSeparator());
        }
        this.getTextUi().printOutputMessage(outputMessage);
    }


    // TODO: Potential depreciation of the below functions
    @Override
    protected String getCommandKeyword() {
        return HelpCommand.COMMAND_KEYWORD;
    }

    @Override
    protected String getFeatureKeyword() {
        return HelpCommand.NO_FEATURE_KEYWORD;
    }

    /**
     * Executes the issued help command.<br>
     * <p>
     * Prints a brief description of all of WellNus' supported commands if
     * the basic 'help' command was issued.<br>
     * <p>
     * Prints a detailed description of a specific feature if the specialised
     * 'help' command was issued.
     */
    @Override
    public void execute() {
        try {
            validateCommand(getArguments());
        } catch (BadCommandException exception) {
            getTextUi().printOutputMessage(exception.getMessage());
            return;
        }
        this.printHelpMessage();
    }

    /**
     * Checks whether the given arguments are valid for our help command.
     *
     * @param arguments Argument-Payload map generated by CommandParser using user's command
     * @throws BadCommandException If the command is invalid
     */
    @Override
    public void validateCommand(HashMap<String, String> arguments) throws BadCommandException {
        assert arguments.containsKey(COMMAND_KEYWORD) : "HelpCommand's payload map does not contain 'help'!";
        // Check if user put in unnecessary payload or arguments
        if (arguments.get(COMMAND_KEYWORD).length() > EMPTY_ARG_LENGTH || arguments.size() > EXPECTED_PAYLOAD_SIZE) {
            throw new BadCommandException(BAD_COMMAND_MESSAGE);
        }
    }
}
