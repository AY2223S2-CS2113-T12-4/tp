package seedu.duke.manager;

import seedu.duke.command.BadCommandException;
import seedu.duke.command.Command;
import seedu.duke.command.CommandParser;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * Manager is the superclass for all WellNUS++ event drivers <br>
 * <br>
 * Each manager is in charge of 'managing' exactly one feature. <br>
 * For example, <i>hb</i> and <i>reflect</i>. <br>
 * <br>
 * The manager should run an event driver (infinite loop) and is in charge
 * of a Feature's input, output, 'business' logic and graceful termination
 */
public abstract class Manager {

    private final CommandParser commandParser;
    private ArrayList<Command> argumentList;

    /**
     * Construct a feature Manager to handle control flow for the given feature.
     */
    public Manager() {
        this.commandParser = new CommandParser();
    }

    /**
     * Utility function to get the CommandParser tied to the Manager class.
     *
     * @return commandParser reference to this manager's instance of CommandParser
     */
    public CommandParser getCommandParser() {
        return this.commandParser;
    }

    /**
     * Utility function to get the featureName this Manager is administering
     *
     * @return name of the feature that this Manager handles
     */
    public abstract String getFeatureName();

    /**
     * Utility function to get a summary description of the feature this Manager is administering
     *
     * @return summary description of the feature that this Manager handles
     */
    public abstract String getBriefDescription();

    /**
     * Utility function to get the full description of the feature this Manager is administering
     *
     * @return full description of the feature that this Manager handles
     */
    public abstract String getFullDescription();

    /**
     * Utility function to set a list of main arguments the feature supports
     */
    public abstract void setArgumentList();

    /**
     * Utility function to get a list of main arguments the feature supports
     *
     * @return <code>ArrayList</code> of <code>Command</code>s
     */
    public ArrayList<Command> getArgumentList() {
        return argumentList;
    }

    /**
     * runEventDriver is the entry point into a feature's driver loop <br>
     * <br>
     * Its implementation MUST include the following:
     * <li>A way to terminate runEventDriver</li>
     * <li>A way to read input from console</li>
     */
    public abstract void runEventDriver();

    /**
     * Validate the arguments and payloads from a commandMap generated by CommandParser <br>
     * <br>
     * The validation logic and strictness is up to the implementer. <br>
     * <br>
     * As a guideline, <code>isValidCommand</code> should minimally: <br>
     * <li>Verify that ALL MANDATORY arguments exist</li>
     * <li>Verify that ALL MANDATORY payloads exist</li>
     * <li>Safely verify the payload type (int, date, etc should be properly processed)</li>
     * <br>
     * Additionally, payload value cleanup (such as trimming) is also possible. <br>
     * As Java is pass (object reference) by value, any changes made to commandMap
     * will persist out of the function call.
     *
     * @param commandMap Argument-Payload map generated by CommandParser
     * @throws BadCommandException if the commandMap has any issues
     */
    public abstract void validateCommand(HashMap<String, String> commandMap) throws BadCommandException;

}
